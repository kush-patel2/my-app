{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","aria-checked","htmlFor","toggleMode2","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","alternateCase","s","chars","toLowerCase","split","i","length","toUpperCase","join","Fragment","style","color","heading","rows","value","onChange","event","target","backgroundColor","newtext","showAlert","map","word","charAt","slice","document","getElementById","select","navigator","clipboard","writeText","count","spl","wordcount","Alert","alert","lower","capitalize","msg","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.a5c3f0ef.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n       <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `} >\r\n  <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\" >Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"\" >Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n       \r\n      </ul>\r\n      {/* <form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault1\" aria-checked=\"true\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault1\">Enable Dark Mode</label>\r\n      </div>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode2} role=\"switch\" id=\"flexSwitchCheckDefault2\" aria-checked=\"true\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault2\">Enable Red Dark Mode</label>\r\n      </div>\r\n      \r\n    </div>\r\n  </div>\r\n</nav>\r\n    </div>\r\n  )\r\n}\r\nNavbar.propTypes={                                              //In order to take props\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\nNavbar.defaultProps={                                    //to set default prop values\r\n    title: \"Set Title Here\",\r\n    aboutText: \"About\"\r\n}","import React,{useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState('');  //\"Enter Text here\" is a default value for text variable\r\n  //text=\"new text\"; =>Wrong way to change the state\r\n  //setText(\"new text\"); =>Correct way to change the state\r\n  const handleUpClick=()=>{\r\n    // console.log(\"Button was clicked\");\r\n    let newtext=text.toUpperCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to UpperCase\",\"success\");\r\n  }\r\n  const handleLoClick=()=>{\r\n    let newtext=text.toLowerCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to LowerCase\",\"success\");\r\n  }\r\n  const handleOnChange=(event)=>{\r\n    // console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  }\r\n  const handleClClick=()=>{\r\n    setText(\"\");\r\n    props.showAlert(\"Cleared Text Area\",\"success\");\r\n  }\r\n  const handleTlClick=()=>{\r\n    \r\n    let newtext=titleCase(text);\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to Title Case\",\"success\");\r\n\r\n  }\r\n  function titleCase(str) {\r\n    return str.toLowerCase().split(' ').map(function (word) {\r\n        return (word.charAt(0).toUpperCase() + word.slice(1));\r\n    }).join(' ');\r\n}\r\nconst handleAlClick=()=>{\r\n    \r\n  let newtext=alternateCase(text);\r\n  setText(newtext);\r\n  props.showAlert(\"Converted to Alternate Case\",\"success\");\r\n\r\n}\r\nvar alternateCase = function (s) {\r\n  var chars = s.toLowerCase().split(\"\");\r\n  for (var i = 0; i < chars.length; i += 2) {\r\n    chars[i] = chars[i].toUpperCase();\r\n  }\r\n  return chars.join(\"\");\r\n};\r\nconst  handleCopyClick=()=>{\r\n  var text=document.getElementById('myBox');\r\n  text.select();\r\n  \r\n  navigator.clipboard.writeText(text.value);\r\n  props.showAlert(\"Copied to Clipboard\",\"success\");\r\n}\r\nconst wordcount=(text)=>{\r\n  var count=0;\r\n  var txt= text;\r\n  var spl=txt.split(' ');\r\n  for(var i=0;i<spl.length;i++){\r\n    if(spl[i]!==\"\"){\r\n      count++;\r\n    }\r\n  }\r\n  return count;\r\n\r\n}\r\n  return (\r\n    <>\r\n    <div className='conatiner' style={{color: props.mode==='light'?'black':'white'}}>\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"  mb-3\">\r\n        <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'white':'#6e6767', color: props.mode==='light'?'black':'white'}}></textarea>\r\n        <button className=\"btn btn-primary my-2 mx-2\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n        <button className=\"btn btn-primary my-2 mx-2\" onClick={handleLoClick}>Convert To Lowercase</button>\r\n        <button className=\"btn btn-primary my-2 mx-2\" onClick={handleTlClick}>Convert To TitleCase</button>\r\n        <button className=\"btn btn-primary my-2 mx-2\" onClick={handleAlClick}>Convert To AlternateCase</button>\r\n        <button className=\"btn btn-primary my-2 mx-2\" onClick={handleCopyClick}>Copy Text </button>\r\n\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClClick}>Clear</button>\r\n        \r\n    </div>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color: props.mode==='light'?'black':'white'}}>\r\n      <h2>Your Text Summary</h2>\r\n      <p>{ wordcount(text) } words, {text.length} characters</p>\r\n      <p>{0.008 * text.split(\" \").length } -Minutes to Read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0 ? text:'Enter text in above textbox to preview'}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  const capitalize=(word)=>{\r\n    const lower= word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n    return (\r\n    props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}:</strong> {props.alert.msg}\r\n        \r\n    </div>\r\n  )\r\n}\r\n","//import logo from './logo.svg';\nimport { useState } from 'react';\nimport './App.css';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\nimport React from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n  \n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode,setMode]=useState('light');\n  const [alert,setAlert]=useState(null);\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },2000)\n  }\n  const toggleMode=()=>{\n    \n    if(mode==='dark'){\n      setMode('light')\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode Has Been Enabled\",\"success\");\n    }\n    else{\n      setMode('dark')\n      document.body.style.backgroundColor='#46464a';\n      showAlert(\"Dark Mode Has Been Enabled\",\"success\");\n    }\n  }\n  \n  \n  const toggleMode2=()=>{\n    \n    if(mode==='dark'){\n      setMode('light')\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode Has Been Enabled\",\"success\");\n    }\n    else{\n      setMode('dark')\n      document.body.style.backgroundColor='#5a0000';\n      showAlert(\"Dark Mode Has Been Enabled\",\"success\");\n    }\n  \n  } \n\n  return (\n    <>\n    {/* <Router> */}\n   <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} toggleMode2={toggleMode2}/>\n   <Alert alert={alert}/>\n   <div className=\"container my-3\">\n   {/* <Routes> */}\n          {/* <Route exact path=\"/about\" element={<About/>}/> */}\n            \n          \n          \n          {/* <Route exact path=\"/\" element={<TextForm heading=\"Enter the Text Here\" mode={mode} showAlert={showAlert}/>}/> */}\n          \n  {/* </Routes> */}\n   \n   <TextForm heading=\"Enter the Text Here\" mode={mode} showAlert={showAlert}/>\n   \n   </div>\n   {/* */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}